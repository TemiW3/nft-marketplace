/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type WritableAccount,
} from 'gill';
import { NFTMARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_DISCRIMINATOR = new Uint8Array([
  198, 51, 53, 241, 116, 29, 126, 194,
]);

export function getSetDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_DISCRIMINATOR);
}

export type SetInstruction<
  TProgram extends string = typeof NFTMARKETPLACE_PROGRAM_ADDRESS,
  TAccountNftmarketplace extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountNftmarketplace extends string
        ? WritableAccount<TAccountNftmarketplace>
        : TAccountNftmarketplace,
      ...TRemainingAccounts,
    ]
  >;

export type SetInstructionData = {
  discriminator: ReadonlyUint8Array;
  value: number;
};

export type SetInstructionDataArgs = { value: number };

export function getSetInstructionDataEncoder(): FixedSizeEncoder<SetInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['value', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_DISCRIMINATOR })
  );
}

export function getSetInstructionDataDecoder(): FixedSizeDecoder<SetInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['value', getU8Decoder()],
  ]);
}

export function getSetInstructionDataCodec(): FixedSizeCodec<
  SetInstructionDataArgs,
  SetInstructionData
> {
  return combineCodec(
    getSetInstructionDataEncoder(),
    getSetInstructionDataDecoder()
  );
}

export type SetInput<TAccountNftmarketplace extends string = string> = {
  nftmarketplace: Address<TAccountNftmarketplace>;
  value: SetInstructionDataArgs['value'];
};

export function getSetInstruction<
  TAccountNftmarketplace extends string,
  TProgramAddress extends Address = typeof NFTMARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SetInput<TAccountNftmarketplace>,
  config?: { programAddress?: TProgramAddress }
): SetInstruction<TProgramAddress, TAccountNftmarketplace> {
  // Program address.
  const programAddress = config?.programAddress ?? NFTMARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftmarketplace: { value: input.nftmarketplace ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.nftmarketplace)],
    programAddress,
    data: getSetInstructionDataEncoder().encode(args as SetInstructionDataArgs),
  } as SetInstruction<TProgramAddress, TAccountNftmarketplace>;

  return instruction;
}

export type ParsedSetInstruction<
  TProgram extends string = typeof NFTMARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    nftmarketplace: TAccountMetas[0];
  };
  data: SetInstructionData;
};

export function parseSetInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nftmarketplace: getNextAccount(),
    },
    data: getSetInstructionDataDecoder().decode(instruction.data),
  };
}
